{"ast":null,"code":"import { TableValidationHelperService } from './table-validation-helper.service';\nimport { TablesStateStoreService } from 'app/services/tables-state-store.service';\nexport class TableHelperService {\n  tablesStateStoreService;\n  tableId;\n  table;\n  constructor() {\n    this.tablesStateStoreService = new TablesStateStoreService();\n  }\n  for(tableId, table) {\n    this.tableId = tableId;\n    this.table = table;\n    return this;\n  }\n  disableRows({\n    ignoredIndexes = []\n  } = {}) {\n    this.tablesStateStoreService.put(this.tableId, this.table);\n    const rowsToDisable = this.table.rows.filter((_, index) => !ignoredIndexes.includes(index));\n    rowsToDisable.forEach(row => {\n      row.isReadOnly = true;\n    });\n    return this;\n  }\n  disableRow(index) {\n    this.tablesStateStoreService.put(this.tableId, this.table);\n    const row = this.table.rows[index];\n    row.isReadOnly = true;\n    return this;\n  }\n  restoreStates() {\n    const tableStates = this.tablesStateStoreService.popAll(this.tableId);\n    tableStates.forEach(tableState => {\n      this.table.rows.forEach((row, index) => Object.assign(row, tableState.rows[index]));\n    });\n    return this;\n  }\n  restoreLastState() {\n    const tableState = this.tablesStateStoreService.pop(this.tableId);\n    this.table.rows.forEach((row, index) => Object.assign(row, tableState?.rows[index]));\n    return this;\n  }\n  validateRow(rowIndex, validationRules) {\n    const tableValidationHelperService = new TableValidationHelperService(validationRules);\n    const fields = this.table.columns.map(column => column.name);\n    const dataItem = this.table.rows[rowIndex].dataItem;\n    const errorInfo = tableValidationHelperService.validate(dataItem, fields);\n    return errorInfo;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}